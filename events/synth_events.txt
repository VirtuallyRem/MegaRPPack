namespace = synth

# New Synthetic Evolution
country_event = {
	id = synth.100
	title = utopia.2551.name
	desc = utopia.2551.desc
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_synthetic_evolution
	trackable = yes
	
	is_triggered_only = yes
	
	immediate = {
		set_policy = {
			policy = robot_pop_policy
			option = robot_pops_allowed
			cooldown = yes
		}

		set_policy = {
			policy = artificial_intelligence_policy
			option = ai_full_rights
			cooldown = yes
		}

		set_country_flag = synthetic_empire 

		give_technology = { tech = tech_bio_reactor message = no }
		
		create_species = {
			is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "ROBOT"
			portrait = "default_robot"
			traits = {
				trait = "trait_mechanical"
			}
			
			effect = {
				if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
					prev = {
						switch = {
							trigger = is_species_class
							HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
							MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
							REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
							AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
							ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
							MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
							FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
							PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							LITHOID = { prev = { change_species_characteristics = { portrait = "lith_machine" } } }
							NECROID = { prev = { change_species_characteristics = { portrait = "nec_machine" } } }
							AQUATIC = { prev = { change_species_characteristics = { portrait = "aqu_machine" } } }
						}
					}
				}

				rename_species = {
					prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}

				set_species_flag = former_organic
				
				save_event_target_as = new_robotic_species
			}
		}
		
		set_variable = {
			which = organics_to_turn
			value = 0
		}
		
		every_owned_pop = {
			limit = {
				is_sapient = yes
				NOR = {
					has_trait = "trait_mechanical"
					has_trait = "trait_machine_unit"
				}
			}
			root = {
				change_variable = {
					which = organics_to_turn
					value = 1
				}
			}
		}
		
		multiply_variable = {
			which = organics_to_turn
			value = 0.20
		}
		
		while = {
			limit = {
				check_variable = {
					which = organics_to_turn
					value > 0
				}
			}
			
			if = {
				limit = {
					any_owned_pop = {
						NOR = {
							has_trait = "trait_mechanical"
							has_trait = "trait_machine_unit"
							has_trait = "trait_latent_psionic"
							has_trait = "trait_psionic"
							has_trait = "trait_fertile"
							has_trait = "trait_robust"
							has_trait = "trait_erudite"
							has_trait = "trait_necrophage"
							has_trait = "trait_immortal"
							has_trait = "trait_naturally_immortal"
						}
					}
				}
				random_owned_pop = {
					limit = {
						is_sapient = yes
						NOR = {
							has_trait = "trait_mechanical"
							has_trait = "trait_machine_unit"
							has_trait = "trait_latent_psionic"
							has_trait = "trait_psionic"
							has_trait = "trait_fertile"
							has_trait = "trait_robust"
							has_trait = "trait_erudite"
							has_trait = "trait_necrophage"
							has_trait = "trait_immortal"
							has_trait = "trait_naturally_immortal"
						}
					}
					change_species = event_target:new_robotic_species
				}
			}
			else = {
				random_owned_pop = {
					limit = {
						is_sapient = yes
						NOR = {
							has_trait = "trait_mechanical"
							has_trait = "trait_machine_unit"
						}
					}
					change_species = event_target:new_robotic_species
				}
			}
			
			change_variable = {
				which = organics_to_turn
				value = -1
			}
		}

		clear_variable = organics_to_turn

		every_owned_leader = {
			limit = { 
				NOR = {
					species = { has_trait = trait_mechanical }
					species = { has_trait = trait_machine_unit }
					leader_class = ruler
				}
			}
			random_list = {
				50 = {
					# 50% chance of not turning
				}
				50 = {
					modifier = {
						OR = {
							has_trait = "leader_trait_governor_erudite"
							has_trait = "leader_trait_governor_psionic"
							has_trait = "leader_trait_admiral_erudite"
							has_trait = "leader_trait_admiral_psionic" 
							has_trait = "leader_trait_general_erudite" 
							has_trait = "leader_trait_general_psionic" 
							has_trait = "leader_trait_scientist_erudite" 
							has_trait = "leader_trait_scientist_psionic" 
						}
						factor = 0.5
					}
					change_species = event_target:new_robotic_species
					change_leader_portrait = species
				}
			}
		}
		every_pool_leader = {
			limit = { 
				NOR = {
					species = { has_trait = trait_mechanical }
					species = { has_trait = trait_machine_unit }
				}
			}
			random_list = {
				50 = {
					# 50% chance of not turning
				}
				50 = {
					modifier = {
						OR = {
							has_trait = "leader_trait_governor_erudite"
							has_trait = "leader_trait_governor_psionic"
							has_trait = "leader_trait_admiral_erudite"
							has_trait = "leader_trait_admiral_psionic" 
							has_trait = "leader_trait_general_erudite" 
							has_trait = "leader_trait_general_psionic" 
							has_trait = "leader_trait_scientist_erudite" 
							has_trait = "leader_trait_scientist_psionic" 
						}
						factor = 0.5
					}
					change_species = event_target:new_robotic_species
					change_leader_portrait = species
				}
			}
		}
		change_dominant_species = { species = event_target:new_robotic_species }
		
		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_trait = leader_trait_admiral_psionic
				remove_trait = leader_trait_admiral_erudite
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_ruler_trait = leader_trait_ruler_psionic
				remove_ruler_trait = leader_trait_ruler_erudite
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_trait = leader_trait_general_psionic
				remove_trait = leader_trait_general_erudite
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_ruler_trait = leader_trait_ruler_psionic
				remove_ruler_trait = leader_trait_ruler_erudite
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_trait = leader_trait_governor_psionic
				remove_trait = leader_trait_governor_erudite
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_ruler_trait = leader_trait_ruler_psionic
				remove_ruler_trait = leader_trait_ruler_erudite
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_trait = leader_trait_scientist_psionic
				remove_trait = leader_trait_scientist_erudite
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_ruler_trait = leader_trait_ruler_psionic
				remove_ruler_trait = leader_trait_ruler_erudite
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_ruler_trait = leader_trait_ruler_psionic
				remove_ruler_trait = leader_trait_ruler_erudite
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_trait = leader_trait_admiral_psionic
				remove_trait = leader_trait_admiral_erudite
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_ruler_trait = leader_trait_ruler_psionic
				remove_ruler_trait = leader_trait_ruler_erudite
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_trait = leader_trait_general_psionic
				remove_trait = leader_trait_general_erudite
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_ruler_trait = leader_trait_ruler_psionic
				remove_ruler_trait = leader_trait_ruler_erudite
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_trait = leader_trait_governor_psionic
				remove_trait = leader_trait_governor_erudite
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_ruler_trait = leader_trait_ruler_psionic
				remove_ruler_trait = leader_trait_ruler_erudite
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_trait = leader_trait_scientist_psionic
				remove_trait = leader_trait_scientist_erudite
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_ruler_trait = leader_trait_ruler_psionic
				remove_ruler_trait = leader_trait_ruler_erudite
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_ruler_trait = leader_trait_ruler_cyborg
				remove_ruler_trait = leader_trait_ruler_psionic
				remove_ruler_trait = leader_trait_ruler_erudite
			}
		}
		
		observer_event = { id = observer.4 }
		every_country = {
			limit = { 
				is_ai = no 
				NOT = { is_same_value = root }
				has_communications = root
			}
			country_event = { id = utopia.2555 days = 5 }
			country_event = { id = utopia.2556 days = 10 }
		}
		if = {
			limit = {
				any_country = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
			}
			random_country = {
				limit = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}
		else = {
			random_country = {
				limit = {
					is_country_type = default
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}

		ROOT = {
			set_country_flag = synthetic_age
		}
	}
	
	option = {
		name = "utopia.2551.a"
		custom_tooltip = SYNTH_ASSIMILATION_CITIZENSHIP_ENABLED

		hidden_effect = {
			if = {
				limit = {
					any_owned_leader = {
						leader_class = ruler
						NOT = { species = { has_trait = trait_mechanical } }
					}
				}
				country_event = { id = synth.150 days = 30 }
			}
		}
	}
}

# Ruler Change
country_event = {
	id = synth.150
	title = synth.150.name
	desc = synth.150.desc
	picture = GFX_evt_throne_room
	show_sound = event_default
	trackable = no
	
	is_triggered_only = yes

	immediate = {
		save_event_target_as = new_robotic_species
	}

	option = {
		name = "synth.150.a"
		trigger = { NOT = { has_authority = auth_imperial } }
		ruler = {
			change_species = event_target:new_robotic_species
			hidden_effect = {
				change_leader_portrait = species
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_ruler_psionic
				remove_trait = leader_trait_ruler_erudite
				remove_trait = leader_trait_ruler_chosen
			}
		}
	}

	option = {
		name = "synth.150.b"
		trigger = { has_authority = auth_imperial }
		ruler = {
        	change_species = event_target:new_robotic_species
			hidden_effect = {
				change_leader_portrait = species
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
				remove_trait = leader_trait_ruler_psionic
				remove_trait = leader_trait_ruler_erudite
				remove_trait = leader_trait_ruler_chosen
			}
		}
	}

	option = {
		name = "synth.150.c"
	}
}
